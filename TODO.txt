============ IN PROGRASS =========================================================

=============== BUGS =============================================================
 * float("") <-- crash
 * method call on static var shouldn't error
 * OS.system("del path\to\file"); not working
 * arr[i] += v; addition not working here (also check map["key"] += v;
 * native argument type float and int provided shouldn't be error.
 * x = y = 42; <-- shouold be valid (assignment allowed now in expr)
      K-normalized form : y = 42; tmp = y; x = tmp; and optimize tmp
 * "".substr() check index limit
 * println(Array.append); <-- crash with TODO: bug
 * msg: operator "" not suported between float and int
 * returning a non static function should be invaled. or
   method should have a this pointer like python
		class A {
			func f() {
				println(this == null); // prints true
			}
			func get_f() = f;
		}
		func main() {
			A().get_f()();
		}

=============== TODO =============================================================
 * implement try and catch
 * native api complete refactor
 * zero division error, import error are not underlined by the compiler
 * switch statement (jump table impl) before: switch body is a single block node
 * parse command line args
 * ipc debugger
 * ext_lib.lib.lib;
 * tests for codegen and vm
 * tests for native api, native struct
 * opcodes string and bytes + zlib
 * destructor (needed for native struct to unload dlls)
 * "string %s literal" % ["replace"]
 * array string to_string
 * print use space seperated
 * Path.listdir() <-- default argument "."
 * implement to_string on type info, runtim instance, class ref, ...
 * error print and dbg info (stack trace)
 * undef THROW_ANLAYZER_ERROR, TOKENIZER_ERROR, ... (not THROW_BUG)
 * change owner pointer from shared to weak/ inline functions
 * str(), hex(), ...
 * while (cond) { break; stmnt; } <-- add unreachable code warning
 * substr and arrray indexing inconsistance
 * build using batch file/make file

=============== WRITE TESTS ======================================================
 * tests for Path and OS class
 * write test for all methods of var (at least 1)
 * bind all combinations
 * write tests for every errors possibly should thrown
 * inheritance tests
 * codegen tests
 * vm tests

=============== LOW PRIORITY =====================================================
 * in, is 
 * unexpected token, expected [empty]
 * try super.EnumClass(); <-- better error msg
 * math class (math.sin, math.tanh ...)
 * compiler as var -> runtime code compile
 * multi thread for multiple VM
 * dir() function
 * var x = File.open; should be compile time error instead of runtime.
 * exit(SUCCESS);

=============== ADDNL OR MAYBE NOT ================================================
 * i++, i--
 * trinary if else
 * reverse list, string, slice array
 * strip, trim... try dir("") in python and implement all.
 * python like range().
 * func f(x) = 2*x + 1; lambda
 * c++ transcompile
 * [expr(i) for i in expr]
 * a, b = b, a
 * map(f, arr) -> arr // can implement in carbon too.
 * implement __repr__() // print array of string / or add "" manually in arr/dict
 * a rich typecheck api

=============== CURRENT FEATURES / DONE ============================================
 * basic language features:
	   * for, foreach, while loops, if, else
	   * enums and switch statements
	   * static and non static variables/ functions.
 * dynamic type (strongly typed) high level
 * object oriented (and functional c++ like)
 * operator overloading support
       * arighmetic operators
       * callables
	   * iterables
 * default argument support
 * arguments could be passed by reference
 * a better analyzer (to reduce runtime errors)
 * no memeory management required
 * first class function/classes/enums and everything
 * easy integration (c++ bindings)
 * native api (calling c/c++ at runtime from dll/so)

 /* syntax features */
 * get_func()(); vars_callable();
 * var path = Path("C:/dev") / "path/to" / "file.txt";
 * func f(x) = x + 2; // single expr function defn
 * support both `&&`/`and` , `||`/`or`, `!`/`not`
 * python like arithmetic operators in builtin
        * "str" * 3, [3.14] * 10
		* "%s - %s" % "first", "second"; // <-- TODO:
