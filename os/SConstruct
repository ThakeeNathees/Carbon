#!python
import os, subprocess
Import('cbenv')

# project includes
#env.add_include_dir('include')

# os env
env_os = cbenv.Clone()
env_os.Append(CPPDEFINES=[])    # predefined macros
env_os.Append(LIBPATH=[])       # static lib dir
env_os.Append(LIBS=[])          # static libs

# source files
Export('env_os')
env_os.sources = [
]

if env_os['platform'] == "osx":
    #SConscript('osx/SConstruct')
    pass # TODO:
elif env_os['platform'] in ('x11', 'linux'):
    SConscript('x11/SConstruct')
    pass
elif env_os['platform'] == "windows":
    SConscript('windows/SConstruct')
    pass

cbenv.sources += env_os.sources

## Making a lib.
# for src in env_os.sources:
#     cbenv.add_ide_sources(src)
# 
# # make library
# lib = env_os.StaticLibrary(
#         'bin/' + 'os' + env_os['out_suffix'],
#         env_os.sources)
# cbenv.Prepend(LIBS=[lib])
