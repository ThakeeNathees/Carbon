
---- BUGS ----
-- float("") <-- crash
-- "".substr() check index limit
-- null var x = 12; // no error for the null before

---- TODO ----
-- "string %s literal" % ["replace"]
-- implement to_string on type info, runtim instance, class ref, ...
-- error print and dbg info (stack trace)
-- switch statement (jump table impl) before: switch body is a single block node
-- undef THROW_ANLAYZER_ERROR, TOKENIZER_ERROR, ... (not THROW_BUG)
-- opcode string print
-- ext_lib.lib.lib;
-- change owner pointer from shared to weak

---- LOW PRIO ---
-- in, is 
-- class A{} var a = A; println(a.get_type_name()); // RuntimeInstance
-- a rich typecheck api
-- unexpected token, expected [empty]
-- try super.EnumClass(); <-- better error msg
-- math class (math.sin, math.tanh ...)
-- compiler as var -> runtime code compile
-- multi thread for multiple VM

---- TODO ADDNL ----
-- i++, i--
-- reverse list, string, slice array
-- " ".join(arr), strip, trim... try dir("") in python and implement all.
-- python like range().
-- dir() function

-- func f(x) = 2*x + 1; lambda
-- [expr(i) for i in expr]
-- a, b = b, a
-- map(f, arr) -> arr // can implement in carbon too.
-- implement __repr__() // print array of string / or add "" manually in arr/dict
-- trinary if else
-- return a, b, c // maybe


---- current features -----------------------------------
-- dynamic type (strongly typed) high level
-- object oriented (and functional c++ like)
-- operator overloading support
       - arighmetic operators
       - callables
	   - iterables
-- default argument support
-- first class function/classes/enums and everything
-- easy integration (c++ bindings)
-- no memeory management required
-- a better analyzer (to reduce runtime errors)
-- basic language features:
	   - enums and switch statements
	   - for, foreach, while loops, if, else
	   - static and non static variables/ functions.

-- get_func()(); vars_callable();
-- func f(x) = x + 2; // single expr function defn
-- support both `&&`/`and` , `||`/`or`, `!`/`not`
-- python like arithmetic operators in builtin
        - "str" * 3, [3.14] * 10
		- "%s - %s" % "first", "second"; // <-- TODO: