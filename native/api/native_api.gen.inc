const char* VARPTR_SOURCE = 
"//------------------------------------------------------------------------------\n"
"// MIT License\n"
"//------------------------------------------------------------------------------\n"
"//\n"
"// Copyright (c) 2020 Thakee Nathees\n"
"//\n"
"// Permission is hereby granted, free of charge, to any person obtaining a copy\n"
"// of this software and associated documentation files (the \"Software\"), to deal\n"
"// in the Software without restriction, including without limitation the rights\n"
"// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n"
"// copies of the Software, and to permit persons to whom the Software is\n"
"// furnished to do so, subject to the following conditions:\n"
"//\n"
"// The above copyright notice and this permission notice shall be included in all\n"
"// copies or substantial portions of the Software.\n"
"//\n"
"// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
"// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
"// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n"
"// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n"
"// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n"
"// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
"// SOFTWARE.\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#ifndef VAR_PTR_H\n"
"#define VAR_PTR_H\n"
"\n"
"namespace carbon {\n"
"\n"
"struct varptr {\n"
"public:\n"
"	enum Type {\n"
"		_NULL,\n"
"		BOOL,\n"
"		INT,\n"
"		FLOAT,\n"
"		STRING,\n"
"		ARRAY,\n"
"		MAP,\n"
"		OBJECT,\n"
"	};\n"
"\n"
"	Type type = _NULL;\n"
"	void* _ptr = nullptr;   // var*\n"
"	void* _data = nullptr;  // data* to modify integer, bool, ...\n"
"	union {\n"
"		unsigned char _bool = 0;\n"
"		long long _int;\n"
"		double _float;\n"
"		const char* _str;\n"
"	};\n"
"\n"
"	bool operator !=(std::nullptr_t) { return !(operator ==(nullptr)); }\n"
"	bool operator ==(std::nullptr_t) {\n"
"		if (type == STRING && _str != nullptr) return false;\n"
"		return _ptr == nullptr;\n"
"	}\n"
"\n"
"	unsigned int __id_dont_touch = -1;\n"
"};\n"
"\n"
"}\n"
"\n"
"#endif // VAR_PTR_H\n"
;

const char* NATIVEAPI_SOURCE = 
"//------------------------------------------------------------------------------\n"
"// MIT License\n"
"//------------------------------------------------------------------------------\n"
"//\n"
"// Copyright (c) 2020 Thakee Nathees\n"
"//\n"
"// Permission is hereby granted, free of charge, to any person obtaining a copy\n"
"// of this software and associated documentation files (the \"Software\"), to deal\n"
"// in the Software without restriction, including without limitation the rights\n"
"// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n"
"// copies of the Software, and to permit persons to whom the Software is\n"
"// furnished to do so, subject to the following conditions:\n"
"//\n"
"// The above copyright notice and this permission notice shall be included in all\n"
"// copies or substantial portions of the Software.\n"
"//\n"
"// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
"// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
"// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n"
"// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n"
"// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n"
"// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
"// SOFTWARE.\n"
"//------------------------------------------------------------------------------\n"
"#ifndef NATIVE_API_H\n"
"#define NATIVE_API_H\n"
"#include \"varptr.h\"\n"
"\n"
"namespace carbon {\n"
"\n"
"struct nativeapi {\n"
"	/* target argument is the pointer of the owner for the return value to\n"
"	   keep the application memory safe, and maintain the ownership.\n"
"	*/\n"
"\n"
"	// string api\n"
"	int (*str_size)(varptr* self);\n"
"	long long (*str_to_int)(varptr* self);\n"
"	double (*str_to_float)(varptr* self);\n"
"	long long (*str_hash)(varptr* self);\n"
"	void (*str_upper)(varptr* self, varptr* target);\n"
"	void (*str_lower)(varptr* self, varptr* target);\n"
"	void (*str_substr)(varptr* self, int start, int end, varptr* target);\n"
"	bool(*str_endswith)(varptr* self, varptr* with);\n"
"	bool(*str_startswith)(varptr* self, varptr* with);\n"
"	void (*str_split)(varptr* self, varptr* delimiter, varptr* target);\n"
"	void (*str_join)(varptr* self, varptr* arr, varptr* target);\n"
"\n"
"	// array api\n"
"	int (*arr_size)(varptr* self);\n"
"	varptr(*arr_at)(varptr* self, int index);\n"
"	void (*arr_push_back)(varptr* self, varptr* val);\n"
"	void (*arr_pop_back)(varptr* self);\n"
"	void (*arr_clear)(varptr* self);\n"
"\n"
"	// map api\n"
"	int (*map_size)(varptr* self);\n"
"	void (*map_insert)(varptr* self, varptr* key, varptr* value);\n"
"	void (*map_clear)(varptr* self);\n"
"	bool (*map_has)(varptr* self, varptr* key);\n"
"	void (*map_at)(varptr* self, varptr* key, varptr* target);\n"
"\n"
"	// object/var api\n"
"	void (*var_call)(varptr* self, varptr* args, varptr* target);\n"
"	void (*var_call_method)(varptr* self, const char* name, varptr* args, varptr* target);\n"
"	void (*var_get_member)(varptr* self, const char* name, varptr* target);\n"
"	void (*var_set_member)(varptr* self, const char* name, varptr* value);\n"
"\n"
"	// TODO: call static rename prefix\n"
"	void (*api_construct)(const char* name, varptr* args, varptr* target);\n"
"	void (*api_call_static)(const char* name, const char* func, varptr* args, varptr* target);\n"
"\n"
"	// global\n"
"	varptr(*new_var)();\n"
"	varptr(*new_string)();\n"
"	varptr(*new_array)();\n"
"	varptr(*new_map)();\n"
"	void (*free_var)(varptr* vptr);\n"
"};\n"
"\n"
"#ifdef SINGLE_IMPLEMENTATION\n"
"nativeapi* api;\n"
"#else\n"
"extern nativeapi* api;\n"
"#endif // SINGLE_IMPLEMENTATION\n"
"\n"
"\n"
"}\n"
"#endif // NATIVE_API_H\n"
"\n"
;

const char* WRAPPERS_SOURCE = 
"//------------------------------------------------------------------------------\n"
"// MIT License\n"
"//------------------------------------------------------------------------------\n"
"//\n"
"// Copyright (c) 2020 Thakee Nathees\n"
"//\n"
"// Permission is hereby granted, free of charge, to any person obtaining a copy\n"
"// of this software and associated documentation files (the \"Software\"), to deal\n"
"// in the Software without restriction, including without limitation the rights\n"
"// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n"
"// copies of the Software, and to permit persons to whom the Software is\n"
"// furnished to do so, subject to the following conditions:\n"
"//\n"
"// The above copyright notice and this permission notice shall be included in all\n"
"// copies or substantial portions of the Software.\n"
"//\n"
"// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
"// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
"// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n"
"// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n"
"// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n"
"// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
"// SOFTWARE.\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#ifndef NATIVE_WRAPPERS_H\n"
"#define NATIVE_WRAPPERS_H\n"
"\n"
"#include \"nativeapi.h\"\n"
"\n"
"namespace carbon {\n"
"\n"
"class var {\n"
"	varptr self;\n"
"	friend class String;\n"
"	friend class Array;\n"
"	friend class Map;\n"
"	friend class CarbonApi;\n"
"\n"
"public:\n"
"	varptr& ptr() { return self; }\n"
"	static var _new() { return var(api->new_var()); }\n"
"	void free() { api->free_var(&self); }\n"
"	var(varptr vptr) {\n"
"		if (vptr._ptr == nullptr) throw \"TODO: invalid\";\n"
"		this->self = vptr;\n"
"	}\n"
"	// constructors from other types\n"
"	var(bool val) { self.type = varptr::BOOL; self._bool = val; }\n"
"	var(int val) { self.type = varptr::INT; self._int = val; }\n"
"	var(double val) { self.type = varptr::FLOAT; self._float = val; }\n"
"	//var(const char* val);\n"
"	var(String val);\n"
"	var(Array val);\n"
"	var(Map val);\n"
"\n"
"	void call(var args, var& target) { api->var_call(&args.self, &args.self, &target.self); }\n"
"	void call_method(const char* name, var args, var& target) { api->var_call_method(&self, name, &args.self, &target.self); }\n"
"	void get_member(const char* name, var& target) { api->var_get_member(&self, name, &target.self); }\n"
"	void set_member(const char* name, var value) { api->var_set_member(&self, name, &value.self); }\n"
"};\n"
"\n"
"class Array {\n"
"	varptr self;\n"
"	friend class var;\n"
"public:\n"
"	varptr& ptr() { return self; }\n"
"	static Array _new() { return Array(api->new_array()); }\n"
"	void free() { api->free_var(&self); }\n"
"	Array(const var& val) : Array(val.self) {}\n"
"	Array(varptr vptr) {\n"
"		if (vptr.type != varptr::ARRAY) throw \"TODO: invalid\";\n"
"		this->self = vptr;\n"
"	}\n"
"\n"
"	int size() { return api->arr_size(&self); }\n"
"	var at(int index) { return api->arr_at(&self, index); }\n"
"	void push_back(var val) { api->arr_push_back(&self, &val.self); }\n"
"	void pop_back() { api->arr_pop_back(&self); }\n"
"	void clear() { api->arr_clear(&self); }\n"
"};\n"
"\n"
"class String {\n"
"	varptr self;\n"
"	friend class var;\n"
"public:\n"
"	varptr& ptr() { return self; }\n"
"	static String _new() { return String(api->new_string()); }\n"
"	void free() { api->free_var(&self); }\n"
"	String(const var& val) : String(val.self) {}\n"
"	String(varptr vptr) {\n"
"		if (vptr.type != varptr::STRING) throw \"TODO: invalid\";\n"
"		this->self = vptr;\n"
"	}\n"
"\n"
"	const char* c_str() { return self._str; }\n"
"\n"
"	int size() { return api->str_size(&self); }\n"
"	long long to_int() { return api->str_to_int(&self); }\n"
"	double to_float() { return api->str_to_float(&self); }\n"
"	long long hash() { return api->str_hash(&self); }\n"
"	void upper(var& target) { api->str_upper(&self, &target.self); }\n"
"	void lower(var& target) { api->str_lower(&self, &target.self); }\n"
"	void substr(int start, int end, var& target) { return api->str_substr(&self, start, end, &target.self); }\n"
"	bool endswith(var with) { return api->str_endswith(&self, &with.self); }\n"
"	bool startswith(var with) { return api->str_startswith(&self, &with.self); }\n"
"	void split(var delimeter, var& target) { api->str_split(&self, &delimeter.self, &target.self); }\n"
"	void join(var arr, var& target) { api->str_join(&self, &arr.self, &target.self); }\n"
"};\n"
"\n"
"class Map {\n"
"	varptr self;\n"
"	friend class var;\n"
"public:\n"
"	varptr& ptr() { return self; }\n"
"	static Map _new() { return Map(api->new_map()); }\n"
"	void free() { api->free_var(&self); }\n"
"	Map(const var& val) : Map(val.self) {}\n"
"	Map(varptr vptr) {\n"
"		if (vptr.type != varptr::MAP) throw \"TODO: invalid\";\n"
"		this->self = vptr;\n"
"	}\n"
"\n"
"	int map_size() { return api->map_size(&self); }\n"
"	void map_insert(var key, var value) { api->map_insert(&self, &key.self, &value.self); }\n"
"	void map_clear() { api->map_clear(&self); }\n"
"	bool map_has(var key) { api->map_has(&self, &key.self); }\n"
"	void map_at(var key, var& target) { api->map_at(&self, &key.self, &target.self); }\n"
"};\n"
"\n"
"class CarbonApi {\n"
"public:\n"
"	static void construct(const char* name, var args, var& target) { api->api_construct(name, &args.self, &target.self); }\n"
"	static void call_static(const char* base, const char* attrib, var args, var& target) {\n"
"		api->api_call_static(base, attrib, &args.self, &target.self);\n"
"	}\n"
"};\n"
"\n"
"#ifdef SINGLE_IMPLEMENTATION\n"
"//var::var(const char* val) {}\n"
"var::var(String val) { self = val.self; }\n"
"var::var(Array val) { self = val.self; }\n"
"var::var(Map val) { self = val.self; }\n"
"#endif // SINGLE_IMPLEMENTATION\n"
"\n"
"}\n"
"#endif // NATIVE_WRAPPERS_H\n"
;

const char* API_SOURCE = 
"//------------------------------------------------------------------------------\n"
"// MIT License\n"
"//------------------------------------------------------------------------------\n"
"//\n"
"// Copyright (c) 2020 Thakee Nathees\n"
"//\n"
"// Permission is hereby granted, free of charge, to any person obtaining a copy\n"
"// of this software and associated documentation files (the \"Software\"), to deal\n"
"// in the Software without restriction, including without limitation the rights\n"
"// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n"
"// copies of the Software, and to permit persons to whom the Software is\n"
"// furnished to do so, subject to the following conditions:\n"
"//\n"
"// The above copyright notice and this permission notice shall be included in all\n"
"// copies or substantial portions of the Software.\n"
"//\n"
"// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n"
"// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n"
"// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n"
"// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n"
"// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n"
"// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n"
"// SOFTWARE.\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#ifndef CARBON_API_H\n"
"#define CARBON_API_H\n"
"\n"
"#include \"varptr.h\"\n"
"#include \"nativeapi.h\"\n"
"#include \"wrappers.h\"\n"
"\n"
"#if defined(_MSC_VER) //  Microsoft\n"
"#define EXPORT __declspec(dllexport)\n"
"#elif defined(__GNUC__) //  GCC\n"
"#define EXPORT __attribute__((visibility(\"default\")))\n"
"#else // unknown\n"
"#define EXPORT\n"
"#endif\n"
"\n"
"/* ------------------------ USAGE ---------------------------\n"
"\n"
"#define SINGLE_IMPLEMENTATION\n"
"#include \"carbon/api.h\"\n"
"using namespace carbon;\n"
"\n"
"#ifdef __cplusplus\n"
"extern \"C\" {\n"
"#endif\n"
"\n"
"EXPORT void varapi_init(nativeapi* _api) {\n"
"	api = _api;\n"
"}\n"
"\n"
"EXPORT varptr your_function(int argc, varptr* argv) {\n"
"	return varptr();\n"
"}\n"
"\n"
"#ifdef __cplusplus\n"
"}\n"
"#endif\n"
"\n"
"---------------------------------------------------------*/\n"
"\n"
"#endif // CARBON_API_H\n"
;

